# ---------- GLOBAL SCOPE -----------
S -> USES GLOBALS 'program
USES -> USE USES 'uses_rec | EPSILON 'uses_null
USE -> use RELATIVE_PATH semicolon 'use
RELATIVE_PATH -> dot RELATIVE_PATH 'relpath_dot | MODULE 'relpath_direct
MODULE -> id dot MODULE 'module_dot | id 'module_direct

GLOBALS -> GLOBAL GLOBALS 'globals_rec | EPSILON 'globals_null
GLOBAL -> DECLARATION semicolon 'global_decl
GLOBAL -> FUNCTION 'global_func
GLOBAL -> STRUCT 'global_struct

ANNOTATIONS -> ANNOTATION ANNOTATIONS 'annot_rec
ANNOTATIONS -> EPSILON 'annot_null
ANNOTATION -> atsymbol id 'annot
ANNOTATION -> atsymbol id opar PRIMARY_LIST cpar 'annot_args

PRIMARY_LIST -> PRIMARY comma PRIMARY_LIST 'primary_list_rec
PRIMARY_LIST -> PRIMARY 'primary_list_direct

FUNCTION -> ANNOTATIONS fn id opar TYPED_IDS cpar BLOCK 'function
TYPED_IDS -> TYPED_ID comma TYPED_IDS 'typed_ids_rec
TYPED_IDS -> EPSILON 'typed_ids_null



# ---------- EXPRESSIONS ----------
EXPRESSION -> opar EXPRESSION cpar 'expr_par

%left id
EXPRESSION -> id 'expr_id

EXPRESSION -> LITERAL 'expr_lit
LITERAL -> bool 'lit_bool
LITERAL -> word 'lit_word
LITERAL -> float 'lit_float
LITERAL -> string 'lit_string

# Bitwise: highest priority, it's grouped first
# That means small chunks: 1 + 3 ^ 5 or 0 -> 1 + (3 ^ 5) or 0
%left hat amp bar
EXPRESSION -> EXPRESSION hat EXPRESSION 'expr_hat
EXPRESSION -> EXPRESSION amp EXPRESSION 'expr_amp
EXPRESSION -> EXPRESSION bar EXPRESSION 'expr_bar

# Arithmetic
# 1 + 2 * 3 * 4 / 4 -> 1 + (((2 * 3) * 4) / 4)
%left star slash plus minus
EXPRESSION -> EXPRESSION star EXPRESSION 'expr_star
EXPRESSION -> EXPRESSION slash EXPRESSION 'expr_slash
EXPRESSION -> EXPRESSION plus EXPRESSION 'expr_plus
EXPRESSION -> EXPRESSION minus EXPRESSION 'expr_minus

# Comparison
# 2 + 1 == 3 -> (2 + 1) == (3)
%nonassoc is deq neq lt leq gt geq
EXPRESSION -> EXPRESSION is EXPRESSION 'expr_is
EXPRESSION -> EXPRESSION deq EXPRESSION 'expr_deq
EXPRESSION -> EXPRESSION neq EXPRESSION 'expr_neq
EXPRESSION -> EXPRESSION lt EXPRESSION 'expr_lt
EXPRESSION -> EXPRESSION leq EXPRESSION 'expr_leq
EXPRESSION -> EXPRESSION gt EXPRESSION 'expr_gt
EXPRESSION -> EXPRESSION geq EXPRESSION 'expr_geq

# Logic: lowest priority, grouped at the end
# This means bigger chunks: 1 + 3 or 0 -> (1 + 3) or (0)
%left not and damp or dbar
EXPRESSION -> not EXPRESSION 'expr_not
EXPRESSION -> EXPRESSION and EXPRESSION 'expr_and
EXPRESSION -> EXPRESSION damp EXPRESSION 'expr_and2
EXPRESSION -> EXPRESSION or EXPRESSION 'expr_or
EXPRESSION -> EXPRESSION dbar EXPRESSION 'expr_or2

# Assignments
EXPRESSION -> ASSIGNMENT 'expr_assign
%right eq
ASSIGNMENT -> PRIMARY eq EXPRESSION 'assign_eq
%nonassoc pluseq minuseq stareq slasheq hateq ampeq bareq
ASSIGNMENT -> PRIMARY pluseq EXPRESSION 'assign_plus
ASSIGNMENT -> PRIMARY minuseq EXPRESSION 'assign_minus
ASSIGNMENT -> PRIMARY stareq EXPRESSION 'assign_star
ASSIGNMENT -> PRIMARY slasheq EXPRESSION 'assign_slash
ASSIGNMENT -> PRIMARY hateq EXPRESSION 'assign_hat
ASSIGNMENT -> PRIMARY ampeq EXPRESSION 'assign_amp
ASSIGNMENT -> PRIMARY bareq EXPRESSION 'assign_bar

PRIMARY -> id 'primary_direct
PRIMARY -> id dot PRIMARY 'primary_rec
# TODO: id[]



# ---------- DECLARATION ----------
DECLARATION -> let id eq EXPRESSION 'decl_let_id
DECLARATION -> let plus id eq EXPRESSION 'decl_let_p_id
DECLARATION -> let TYPED_ID eq EXPRESSION 'decl_let_typed
DECLARATION -> let plus TYPED_ID eq EXPRESSION 'decl_let_p_typed

TYPED_ID -> id colon TYPE 'typed
TYPE -> id lt TYPES gt 'type_typed
TYPE -> id 'type_direct
TYPES -> TYPE comma TYPES 'types_rec
TYPES -> TYPE 'types_direct



# ---------- CONTROL ----------
CONTROL -> assert EXPRESSION 'ctrl_assert
CONTROL -> break 'ctrl_break
CONTROL -> continue 'ctrl_continue
CONTROL -> fall 'ctrl_fall
CONTROL -> return 'ctrl_ret
CONTROL -> return EXPRESSION 'ctrl_retval



# ---------- CONDITIONAL ----------
CONDITIONAL -> IF 'cond_if
CONDITIONAL -> SWITCH 'cond_switch

# Dangling else problem, solve by shift
%left else elif if
IF -> if EXPRESSION STATEMENT 'if_only
IF -> if EXPRESSION STATEMENT ELIF 'if_elif
ELIF -> elif EXPRESSION STATEMENT 'elif_only
ELIF -> elif EXPRESSION STATEMENT ELIF 'elif_rec
ELIF -> ELSE 'elif_else
ELSE -> else STATEMENT 'else

SWITCH -> switch EXPRESSION obraces SWITCH_BODY cbraces 'switch
SWITCH_BODY -> SWITCH_CASE SWITCH_BODY 'switch_rec
SWITCH_BODY -> SWITCH_CASE 'switch_one
# TODO: case 'a', 'b', 'c':
SWITCH_CASE -> case LITERAL colon STATEMENTS 'switch_case
SWITCH_CASE -> default colon STATEMENTS 'switch_default



# ---------- LOOP ----------
LOOP -> FOR 'loop_for
LOOP -> WHILE 'loop_while
FOR -> for id in EXPRESSION STATEMENT 'for
WHILE -> while EXPRESSION STATEMENT 'while



# ---------- STRUCT ----------
STRUCT -> ANNOTATIONS struct id obraces STRUCT_DEF cbraces 'struct
STRUCT_DEF -> TYPED_ID comma STRUCT_DEF 'struct_def
STRUCT_DEF -> EPSILON 'struct_def_null



# ---------- BLOCK ----------
BLOCK -> obraces STATEMENTS cbraces 'block
STATEMENTS -> STATEMENT semicolon STATEMENTS 'stmts_rec
STATEMENTS -> EPSILON 'stmts_null

STATEMENT -> BLOCK 'stmt_block
STATEMENT -> DECLARATION 'stmt_decl
STATEMENT -> EXPRESSION 'stmt_expr
STATEMENT -> CONTROL 'stmt_ctrl
STATEMENT -> CONDITIONAL 'stmt_cond
STATEMENT -> LOOP 'stmt_loop
