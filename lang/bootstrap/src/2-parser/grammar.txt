# ---------- GLOBAL SCOPE -----------
S -> USES GLOBALS #program
USES -> USE USES #uses_rec
USES -> EPSILON #uses_null
USE -> use PATH semicolon #use_global
USE -> use dot PATH semicolon #use_local

GLOBALS -> GLOBAL GLOBALS #globals_rec
GLOBALS -> EPSILON #globals_null
GLOBAL -> DECLARATION semicolon #global_decl
GLOBAL -> FUNCTION #global_func
GLOBAL -> STRUCT #global_struct
GLOBAL -> IMPL #global_impl
GLOBAL -> EXTERN #global_extern

ANNOTATIONS -> ANNOTATION ANNOTATIONS #annot_rec
ANNOTATIONS -> EPSILON #annot_null
ANNOTATION -> atsymbol id #annot
ANNOTATION -> atsymbol id opar EXPRESSION_LIST cpar #annot_args

FUNCTION -> ANNOTATIONS fn id BLOCK #function_noargs_void
FUNCTION -> ANNOTATIONS fn id arrow TYPE BLOCK #function_noargs_typed
FUNCTION -> ANNOTATIONS fn id opar PARAMS cpar BLOCK #function_void
FUNCTION -> ANNOTATIONS fn id opar PARAMS cpar arrow TYPE BLOCK #function_typed
PARAMS -> PARAM comma PARAMS #params_rec
PARAMS -> PARAM #params_one
PARAM -> TYPED_ID #param_copy
PARAM -> amp TYPED_ID #param_ref
PARAM -> plus TYPED_ID #param_mut
PARAM -> amp plus TYPED_ID #param_mutref



# ---------- EXPRESSIONS ----------
# Parentheses always have the highest priority
%left opar cpar
EXPRESSION -> opar EXPRESSION cpar #expr_par

# The name, atom of all expressions
%hint id
EXPRESSION -> NAME #expr_name
%left id
NAME -> id #name

# Pathing
%left dot
EXPRESSION -> EXPRESSION dot NAME #expr_dot

# Function call
EXPRESSION -> EXPRESSION opar cpar #expr_call_noargs
EXPRESSION -> EXPRESSION opar EXPRESSION_LIST cpar #expr_call
%hint comma
EXPRESSION_LIST -> EXPRESSION #expression_list_one
EXPRESSION_LIST -> EXPRESSION comma EXPRESSION_LIST #expression_list_rec

EXPRESSION -> LITERAL #expr_lit
LITERAL -> bool #lit_bool
LITERAL -> word #lit_word
LITERAL -> float #lit_float
LITERAL -> string #lit_string
LITERAL -> TUPLE #lit_tuple
TUPLE -> opar EXPRESSION comma cpar #tuple_one
TUPLE -> opar EXPRESSION comma EXPRESSION_LIST cpar #tuple_many

%left sizeof
EXPRESSION -> sizeof EXPRESSION #expr_sizeof

# Bitwise: highest priority, it#s grouped first
# That means small chunks: 1 + 3 ^ 5 or 0 -> 1 + (3 ^ 5) or 0
%left hat amp bar
EXPRESSION -> EXPRESSION hat EXPRESSION #expr_hat
EXPRESSION -> EXPRESSION amp EXPRESSION #expr_amp
EXPRESSION -> EXPRESSION bar EXPRESSION #expr_bar

# Arithmetic
# 1 + 2 * 3 * 4 / 4 -> 1 + (((2 * 3) * 4) / 4)
%left star slash plus minus
EXPRESSION -> EXPRESSION star EXPRESSION #expr_star
EXPRESSION -> EXPRESSION slash EXPRESSION #expr_slash
EXPRESSION -> EXPRESSION plus EXPRESSION #expr_plus
EXPRESSION -> EXPRESSION minus EXPRESSION #expr_minus

# Comparison
# 2 + 1 == 3 -> (2 + 1) == (3)
%nonassoc deq neq lt leq gt geq
EXPRESSION -> EXPRESSION deq EXPRESSION #expr_deq
EXPRESSION -> EXPRESSION neq EXPRESSION #expr_neq
EXPRESSION -> EXPRESSION lt EXPRESSION #expr_lt
EXPRESSION -> EXPRESSION leq EXPRESSION #expr_leq
EXPRESSION -> EXPRESSION gt EXPRESSION #expr_gt
EXPRESSION -> EXPRESSION geq EXPRESSION #expr_geq

# Logic: lowest priority, grouped at the end
# This means bigger chunks: 1 + 3 or 0 -> (1 + 3) or (0)
%left not and or
EXPRESSION -> not EXPRESSION #expr_not
EXPRESSION -> EXPRESSION and EXPRESSION #expr_and
EXPRESSION -> EXPRESSION or EXPRESSION #expr_or

# Struct instantiation
EXPRESSION -> STRUCT_INST #expr_struct_inst
STRUCT_INST -> new PATH obraces STRUCT_FIELD_INST cbraces #struct_inst
STRUCT_FIELD_INST -> id eq EXPRESSION comma STRUCT_FIELD_INST #struct_field_inst_rec
STRUCT_FIELD_INST -> EPSILON #struct_field_inst_null

# Assignments
EXPRESSION -> ASSIGNMENT #expr_assign
%right eq
ASSIGNMENT -> EXPRESSION eq EXPRESSION #assign_eq
%nonassoc pluseq minuseq stareq slasheq hateq ampeq bareq
ASSIGNMENT -> EXPRESSION pluseq EXPRESSION #assign_plus
ASSIGNMENT -> EXPRESSION minuseq EXPRESSION #assign_minus
ASSIGNMENT -> EXPRESSION stareq EXPRESSION #assign_star
ASSIGNMENT -> EXPRESSION slasheq EXPRESSION #assign_slash
ASSIGNMENT -> EXPRESSION hateq EXPRESSION #assign_hat
ASSIGNMENT -> EXPRESSION ampeq EXPRESSION #assign_amp
ASSIGNMENT -> EXPRESSION bareq EXPRESSION #assign_bar

# Comma has the lowest priority, since it's not part of an expression
%left comma



# ---------- DECLARATION ----------
DECLARATION -> let id eq EXPRESSION #decl_id
DECLARATION -> let plus id eq EXPRESSION #decl_p_id

TYPED_ID -> id colon TYPE #typed

TYPE -> kbool #type_bool
TYPE -> kbyte #type_byte
TYPE -> kfloat #type_float
TYPE -> kptr #type_ptr
TYPE -> kstring #type_string
TYPE -> kword #type_word
TYPE -> PATH #type_path
TYPE -> TUPLEDEF #type_tuple
TYPE -> TUPLEDEF star EXPRESSION #type_tuple_star

PATH -> id #path_id
PATH -> PATH dot id #path_dot

TUPLEDEF -> opar TYPE comma cpar #tupledef_one
TUPLEDEF -> opar TYPE comma TYPES cpar #tupledef_many

TYPES -> TYPE comma TYPES #types_rec
TYPES -> TYPE #types_direct



# ---------- CONDITIONAL ----------
# Dangling else problem, solve by shift
%left else elif if
IF -> if EXPRESSION STATEMENT #if_only
IF -> if EXPRESSION STATEMENT ELIF #if_elif
ELIF -> elif EXPRESSION STATEMENT #elif_only
ELIF -> elif EXPRESSION STATEMENT ELIF #elif_rec
ELIF -> ELSE #elif_else
ELSE -> else STATEMENT #else

SWITCH -> switch EXPRESSION obraces SWITCH_BODY cbraces #switch
SWITCH_BODY -> SWITCH_CASE SWITCH_BODY #switch_rec
SWITCH_BODY -> SWITCH_CASE #switch_one
# TODO: case 'a', 'b', 'c':
SWITCH_CASE -> case LITERAL colon STATEMENTS #switch_case
SWITCH_CASE -> default colon STATEMENTS #switch_default



# ---------- STRUCT ----------
STRUCT -> ANNOTATIONS struct id obraces STRUCT_DEF cbraces #struct
STRUCT_DEF -> TYPED_ID comma STRUCT_DEF #struct_def
STRUCT_DEF -> EPSILON #struct_def_null



# ---------- IMPL ----------
IMPL -> ANNOTATIONS impl PATH obraces IMPL_DEF cbraces #impl
IMPL_DEF -> FUNCTION IMPL_DEF #impl_def
IMPL_DEF -> EPSILON #impl_def_null



# ---------- EXTERN ----------
EXTERN -> ANNOTATIONS extern id semicolon #extern_noargs_void
EXTERN -> ANNOTATIONS extern id arrow TYPE semicolon #extern_noargs_typed
EXTERN -> ANNOTATIONS extern id opar PARAMS cpar semicolon #extern_void
EXTERN -> ANNOTATIONS extern id opar PARAMS cpar arrow TYPE semicolon #extern_typed



# ---------- BLOCK (STATEMENTS) ----------
BLOCK -> obraces STATEMENTS cbraces #block
STATEMENTS -> STATEMENT STATEMENTS #stmts_rec
STATEMENTS -> EPSILON #stmts_null
STATEMENT -> BLOCK #stmt_block
STATEMENT -> DECLARATION semicolon #stmt_decl
STATEMENT -> EXPRESSION semicolon #stmt_expr
# --- CONTROL ---
STATEMENT -> assert EXPRESSION semicolon #stmt_assert
STATEMENT -> break semicolon #stmt_break
STATEMENT -> continue semicolon #stmt_continue
STATEMENT -> fall semicolon #stmt_fall
STATEMENT -> return semicolon #stmt_ret
STATEMENT -> return EXPRESSION semicolon #stmt_retval
# --- CONDITIONAL ---
STATEMENT -> IF #stmt_if
STATEMENT -> SWITCH #stmt_switch
# --- LOOP ---
STATEMENT -> for id in EXPRESSION STATEMENT #stmt_for
STATEMENT -> while EXPRESSION STATEMENT #stmt_while
