# ---------- GLOBAL SCOPE -----------
S -> USES GLOBALS 'program
USES -> USE USES 'uses_rec | USE 'uses_direct
USE -> use RELATIVE_PATH semicolon 'use
RELATIVE_PATH -> dot RELATIVE_PATH 'relpath_dot | MODULE 'relpath_direct
MODULE -> id dot MODULE 'module_dot | id 'module_direct

GLOBALS -> GLOBAL GLOBALS 'globals_rec | GLOBAL 'globals_direct
GLOBAL -> ASSIGNMENT semicolon 'global_assign
GLOBAL -> FUNCTION 'global_func
GLOBAL -> STRUCT 'global_struct

FUNCTION -> fn id opar TYPED_IDS cpar BLOCK 'func_args
TYPED_IDS -> TYPED_ID comma TYPED_IDS 'typed_ids_rec
TYPED_IDS -> EPSILON 'typed_ids_null



# ---------- EXPRESSIONS ----------
EXPRESSION -> opar EXPRESSION cpar 'expr_par

# Bitwise: highest priority, it's grouped first
# That means small chunks: 1 + 3 ^ 5 or 0 -> 1 + (3 ^ 5) or 0
%left hat amp bar
EXPRESSION -> EXPRESSION hat EXPRESSION 'expr_hat
EXPRESSION -> EXPRESSION amp EXPRESSION 'expr_amp
EXPRESSION -> EXPRESSION bar EXPRESSION 'expr_bar

# Arithmetic
# 1 + 2 * 3 * 4 / 4 -> 1 + (((2 * 3) * 4) / 4)
%left star slash plus minus
EXPRESSION -> EXPRESSION star EXPRESSION 'expr_star
EXPRESSION -> EXPRESSION slash EXPRESSION 'expr_slash
EXPRESSION -> EXPRESSION plus EXPRESSION 'expr_plus
EXPRESSION -> EXPRESSION minus EXPRESSION 'expr_minus

# Comparison
# 2 + 1 == 3 -> (2 + 1) == (3)
%nonassoc is deq neq lt leq gt geq
EXPRESSION -> EXPRESSION is EXPRESSION 'expr_is
EXPRESSION -> EXPRESSION deq EXPRESSION 'expr_deq
EXPRESSION -> EXPRESSION neq EXPRESSION 'expr_neq
EXPRESSION -> EXPRESSION lt EXPRESSION 'expr_lt
EXPRESSION -> EXPRESSION leq EXPRESSION 'expr_leq
EXPRESSION -> EXPRESSION gt EXPRESSION 'expr_gt
EXPRESSION -> EXPRESSION geq EXPRESSION 'expr_geq

# Logic: lowest priority, grouped at the end
# This means bigger chunks: 1 + 3 or 0 -> (1 + 3) or (0)
%left not and damp or dbar
EXPRESSION -> not EXPRESSION 'expr_not
EXPRESSION -> EXPRESSION and EXPRESSION 'expr_and
EXPRESSION -> EXPRESSION damp EXPRESSION 'expr_and2
EXPRESSION -> EXPRESSION or EXPRESSION 'expr_or
EXPRESSION -> EXPRESSION dbar EXPRESSION 'expr_or2

# Assignments
EXPRESSION -> ASSIGNMENT 'expr_assign
%right eq
ASSIGNMENT -> LHS eq RHS 'assign_eq
%nonassoc pluseq minuseq stareq slasheq hateq ampeq bareq
ASSIGNMENT -> LHS pluseq RHS 'assign_plus
ASSIGNMENT -> LHS minuseq RHS 'assign_minus
ASSIGNMENT -> LHS stareq RHS 'assign_star
ASSIGNMENT -> LHS slasheq RHS 'assign_slash
ASSIGNMENT -> LHS hateq RHS 'assign_hat
ASSIGNMENT -> LHS ampeq RHS 'assign_amp
ASSIGNMENT -> LHS bareq RHS 'assign_bar

LHS -> TYPED_ID comma LHS 'lhs_typed_rec
LHS -> TYPED_ID 'lhs_typed
LHS -> id comma LHS 'lhs_id_rec
%hint comma
LHS -> id 'lhs_id
TYPED_ID -> id colon TYPE 'typed
TYPE -> id lt TYPES gt 'type_typed
TYPE -> id 'type_direct
TYPES -> TYPE comma TYPES 'types_rec
TYPES -> TYPE 'types_direct

%left comma
RHS -> EXPRESSION comma RHS 'rhs_rec
%hint eq
RHS -> EXPRESSION 'rhs_direct

EXPRESSION -> id 'expr_id
EXPRESSION -> bool 'expr_bool
EXPRESSION -> int 'expr_int
EXPRESSION -> float 'expr_float
EXPRESSION -> string 'expr_string



# ---------- CONTROL ----------
CONTROL -> assert EXPRESSION 'ctrl_assert
CONTROL -> break 'ctrl_break
CONTROL -> continue 'ctrl_continue
CONTROL -> return 'ctrl_ret
CONTROL -> return EXPRESSION 'ctrl_retval



# ---------- CONDITIONAL ----------
CONDITIONAL -> IF 'cond_if

# Dangling else problem, solve by shift
%left else elif if
IF -> if EXPRESSION STATEMENT 'if_only
IF -> if EXPRESSION STATEMENT ELIF 'if_elif
ELIF -> elif EXPRESSION STATEMENT 'elif_only
ELIF -> elif EXPRESSION STATEMENT ELIF 'elif_rec
ELIF -> ELSE 'elif_else
ELSE -> else STATEMENT 'else



# ---------- LOOP ----------
LOOP -> FOR 'loop_for
LOOP -> WHILE 'loop_while
FOR -> for id in EXPRESSION STATEMENT 'for
WHILE -> while EXPRESSION STATEMENT 'while



# ---------- STRUCT ----------
STRUCT -> struct id obraces STRUCT_DEF cbraces 'struct
STRUCT_DEF -> ASSIGNMENT semicolon STRUCT_DEF 'struct_def
STRUCT_DEF -> EPSILON 'struct_def_null



# ---------- BLOCK ----------
BLOCK -> obraces STATEMENTS cbraces 'block
STATEMENTS -> STATEMENT semicolon STATEMENTS 'stmts_rec
STATEMENTS -> EPSILON 'stmts_null

STATEMENT -> BLOCK 'stmt_block
STATEMENT -> EXPRESSION 'stmt_expr
STATEMENT -> CONTROL 'stmt_ctrl
STATEMENT -> CONDITIONAL 'stmt_cond
STATEMENT -> LOOP 'stmt_loop
