# ---------- GLOBAL SCOPE -----------
S -> USES GLOBALS
  USES -> USE USES | USE
  USE -> use RELATIVE_PATH semicolon
    RELATIVE_PATH -> dot RELATIVE_PATH | MODULE
      MODULE -> id dot MODULE | id

  GLOBALS -> GLOBAL GLOBALS | GLOBAL
  GLOBAL -> ASSIGNMENT semicolon | FUNCTION
    FUNCTION -> fn id opar TYPED_IDS cpar BLOCK | fn id opar cpar BLOCK
      TYPED_IDS -> TYPED_ID comma TYPED_IDS | TYPED_ID
      # Block is defined at the end



# ---------- EXPRESSIONS ----------
EXPRESSION -> opar EXPRESSION cpar

# Bitwise: highest priority, it's grouped first
# That means small chunks: 1 + 3 ^ 5 or 0 -> 1 + (3 ^ 5) or 0
%left hat amp bar
EXPRESSION -> EXPRESSION hat EXPRESSION
EXPRESSION -> EXPRESSION amp EXPRESSION
EXPRESSION -> EXPRESSION bar EXPRESSION

# Arithmetic
# 1 + 2 * 3 * 4 / 4 -> 1 + (((2 * 3) * 4) / 4)
%left star slash plus minus
EXPRESSION -> EXPRESSION star EXPRESSION
EXPRESSION -> EXPRESSION slash EXPRESSION
EXPRESSION -> EXPRESSION plus EXPRESSION
EXPRESSION -> EXPRESSION minus EXPRESSION

# Comparison
# 2 + 1 == 3 -> (2 + 1) == (3)
%nonassoc deq neq lt leq gt geq
EXPRESSION -> EXPRESSION deq EXPRESSION
EXPRESSION -> EXPRESSION neq EXPRESSION
EXPRESSION -> EXPRESSION lt EXPRESSION
EXPRESSION -> EXPRESSION leq EXPRESSION
EXPRESSION -> EXPRESSION gt EXPRESSION
EXPRESSION -> EXPRESSION geq EXPRESSION

# Logic: lowest priority, grouped at the end
# This means bigger chunks: 1 + 3 or 0 -> (1 + 3) or (0)
%left not and or
EXPRESSION -> not EXPRESSION
EXPRESSION -> EXPRESSION and EXPRESSION
EXPRESSION -> EXPRESSION or EXPRESSION

# Assignments
EXPRESSION -> ASSIGNMENT
%right eq
ASSIGNMENT -> LHS eq RHS
%nonassoc pluseq minuseq stareq slasheq hateq ampeq bareq
ASSIGNMENT -> LHS pluseq RHS
ASSIGNMENT -> LHS minuseq RHS
ASSIGNMENT -> LHS stareq RHS
ASSIGNMENT -> LHS slasheq RHS
ASSIGNMENT -> LHS hateq RHS
ASSIGNMENT -> LHS ampeq RHS
ASSIGNMENT -> LHS bareq RHS

LHS -> TYPED_ID comma LHS
LHS -> TYPED_ID
LHS -> id comma LHS
%hint comma
LHS -> id
TYPED_ID -> id colon TYPE
TYPE -> id lt TYPES gt | id
TYPES -> TYPE comma TYPES | TYPE

%left comma
RHS -> EXPRESSION comma RHS
%hint eq
RHS -> EXPRESSION

EXPRESSION -> id
EXPRESSION -> None | bool | int | float | string



# ---------- CONTROL ----------
#CONTROL -> EPSILON



# ---------- CONDITIONAL ----------
#CONDITIONAL -> EPSILON



# ---------- LOOP ----------
#LOOP -> EPSILON



# ---------- BLOCK ----------
BLOCK -> obraces STATEMENTS cbraces
  STATEMENTS -> STATEMENT semicolon STATEMENTS | STATEMENT semicolon
  STATEMENT -> EXPRESSION
